"""
Script de validaci√≥n comprehensivo para features.py refactorizado.
Prueba todos los transformers, builders y factories.
"""

import sys
from pathlib import Path
import numpy as np
import pandas as pd

# Agregar directorio ra√≠z al path
sys.path.insert(0, str(Path(__file__).parent))

print("="*80)
print("üß™ VALIDACI√ìN COMPREHENSIVA DE FEATURES.PY REFACTORIZADO")
print("="*80)

# Crear datos de prueba
np.random.seed(42)
n_samples = 100
X_train = pd.DataFrame({
    'feature_1': np.random.normal(0, 1, n_samples),
    'feature_2': np.random.normal(5, 2, n_samples),
    'feature_3': np.random.exponential(2, n_samples),
    'feature_4': np.random.uniform(0, 10, n_samples),
    'feature_5': np.random.normal(0, 0.1, n_samples),  # Baja varianza
    'categorical': ['A', 'B'] * (n_samples // 2),  # Columna no num√©rica
    'id': range(n_samples)  # ID a excluir
})

# Agregar algunos outliers
X_train.loc[0:5, 'feature_1'] = [100, -100, 200, -200, 150, -150]

print(f"\nüìä Datos de prueba creados: {X_train.shape}")
print(f"   Columnas: {list(X_train.columns)}")

# ============================================================================
# TEST 1: IMPORTS
# ============================================================================
print("\n" + "="*80)
print("1Ô∏è‚É£  TEST DE IMPORTS")
print("="*80)

try:
    from acoustic_ml.features import (
        # Transformers
        FeatureTransformer,
        NumericFeatureSelector,
        PowerFeatureTransformer,
        OutlierRemover,
        FeatureScaler,
        CorrelationFilter,
        VarianceThresholdSelector,
        # Builder
        FeaturePipelineBuilder,
        # Factories
        create_preprocessing_pipeline,
        create_feature_selection_pipeline,
        create_full_pipeline
    )
    print("‚úÖ Todos los imports exitosos")
    print("   ‚Ä¢ FeatureTransformer (base)")
    print("   ‚Ä¢ 6 Transformers especializados")
    print("   ‚Ä¢ FeaturePipelineBuilder")
    print("   ‚Ä¢ 3 Factory functions")
except Exception as e:
    print(f"‚ùå Error en imports: {e}")
    sys.exit(1)

# ============================================================================
# TEST 2: NUMERIC FEATURE SELECTOR
# ============================================================================
print("\n" + "="*80)
print("2Ô∏è‚É£  TEST DE NUMERICFEATURESELECTOR")
print("="*80)

try:
    selector = NumericFeatureSelector(exclude_cols=['id'])
    X_numeric = selector.fit_transform(X_train)
    
    print(f"‚úÖ NumericFeatureSelector funciona")
    print(f"   ‚Ä¢ Shape original: {X_train.shape}")
    print(f"   ‚Ä¢ Shape despu√©s: {X_numeric.shape}")
    print(f"   ‚Ä¢ Features seleccionadas: {selector.feature_names_}")
    print(f"   ‚Ä¢ Columnas excluidas: categorical, id ‚úì")
    
    assert X_numeric.shape[1] == 5, "Deber√≠a seleccionar 5 columnas num√©ricas"
    assert 'id' not in X_numeric.columns, "ID deber√≠a estar excluido"
    assert 'categorical' not in X_numeric.columns, "Categorical deber√≠a estar excluido"
    
except Exception as e:
    print(f"‚ùå Error: {e}")
    import traceback
    traceback.print_exc()
    sys.exit(1)

# ============================================================================
# TEST 3: POWER FEATURE TRANSFORMER
# ============================================================================
print("\n" + "="*80)
print("3Ô∏è‚É£  TEST DE POWERFEATURETRANSFORMER")
print("="*80)

try:
    X_numeric_clean = X_numeric.drop(columns=['feature_5'])  # Remover baja varianza
    
    transformer = PowerFeatureTransformer(method='yeo-johnson')
    X_transformed = transformer.fit_transform(X_numeric_clean)
    
    print(f"‚úÖ PowerFeatureTransformer funciona")
    print(f"   ‚Ä¢ M√©todo: yeo-johnson")
    print(f"   ‚Ä¢ Shape: {X_transformed.shape}")
    print(f"   ‚Ä¢ Tipo: {type(X_transformed)}")
    print(f"   ‚Ä¢ Media aprox: {X_transformed.mean().mean():.4f} (cercana a 0)")
    print(f"   ‚Ä¢ Std aprox: {X_transformed.std().mean():.4f} (cercana a 1)")
    
    assert isinstance(X_transformed, pd.DataFrame), "Deber√≠a preservar DataFrame"
    assert X_transformed.shape == X_numeric_clean.shape, "Shape deber√≠a mantenerse"
    
except Exception as e:
    print(f"‚ùå Error: {e}")
    import traceback
    traceback.print_exc()
    sys.exit(1)

# ============================================================================
# TEST 4: OUTLIER REMOVER
# ============================================================================
print("\n" + "="*80)
print("4Ô∏è‚É£  TEST DE OUTLIERREMOVER")
print("="*80)

try:
    remover = OutlierRemover(factor=1.5)
    X_no_outliers = remover.fit_transform(X_numeric_clean)
    
    print(f"‚úÖ OutlierRemover funciona")
    print(f"   ‚Ä¢ Shape antes: {X_numeric_clean.shape}")
    print(f"   ‚Ä¢ Shape despu√©s: {X_no_outliers.shape}")
    print(f"   ‚Ä¢ Outliers removidos: {remover.n_outliers_removed_}")
    print(f"   ‚Ä¢ % removido: {remover.n_outliers_removed_/len(X_numeric_clean)*100:.2f}%")
    
    assert X_no_outliers.shape[0] < X_numeric_clean.shape[0], "Deber√≠a remover filas"
    assert remover.n_outliers_removed_ > 0, "Deber√≠a detectar outliers"
    
except Exception as e:
    print(f"‚ùå Error: {e}")
    import traceback
    traceback.print_exc()
    sys.exit(1)

# ============================================================================
# TEST 5: FEATURE SCALER
# ============================================================================
print("\n" + "="*80)
print("5Ô∏è‚É£  TEST DE FEATURESCALER")
print("="*80)

try:
    for method in ['standard', 'minmax', 'robust']:
        scaler = FeatureScaler(method=method)
        X_scaled = scaler.fit_transform(X_numeric_clean)
        
        print(f"‚úÖ FeatureScaler('{method}') funciona")
        print(f"   ‚Ä¢ Shape: {X_scaled.shape}")
        
        if method == 'standard':
            print(f"   ‚Ä¢ Media: {X_scaled.mean().mean():.6f} (‚âà0)")
            print(f"   ‚Ä¢ Std: {X_scaled.std().mean():.6f} (‚âà1)")
        elif method == 'minmax':
            print(f"   ‚Ä¢ Min: {X_scaled.min().min():.6f} (‚âà0)")
            print(f"   ‚Ä¢ Max: {X_scaled.max().max():.6f} (‚âà1)")
        
        assert isinstance(X_scaled, pd.DataFrame), f"Deber√≠a preservar DataFrame ({method})"
    
    print("‚úÖ Todos los m√©todos de escalado funcionan")
    
except Exception as e:
    print(f"‚ùå Error: {e}")
    import traceback
    traceback.print_exc()
    sys.exit(1)

# ============================================================================
# TEST 6: CORRELATION FILTER
# ============================================================================
print("\n" + "="*80)
print("6Ô∏è‚É£  TEST DE CORRELATIONFILTER")
print("="*80)

try:
    # Crear features correlacionadas
    X_corr = X_numeric_clean.copy()
    X_corr['feature_1_copy'] = X_corr['feature_1'] * 0.99  # Casi id√©ntica
    
    filter = CorrelationFilter(threshold=0.95)
    X_filtered = filter.fit_transform(X_corr)
    
    print(f"‚úÖ CorrelationFilter funciona")
    print(f"   ‚Ä¢ Shape antes: {X_corr.shape}")
    print(f"   ‚Ä¢ Shape despu√©s: {X_filtered.shape}")
    print(f"   ‚Ä¢ Features removidas: {X_corr.shape[1] - X_filtered.shape[1]}")
    print(f"   ‚Ä¢ Threshold: {filter.threshold}")
    
    assert X_filtered.shape[1] < X_corr.shape[1], "Deber√≠a remover features correlacionadas"
    
except Exception as e:
    print(f"‚ùå Error: {e}")
    import traceback
    traceback.print_exc()
    sys.exit(1)

# ============================================================================
# TEST 7: VARIANCE THRESHOLD SELECTOR
# ============================================================================
print("\n" + "="*80)
print("7Ô∏è‚É£  TEST DE VARIANCETHRESHOLDSELECTOR")
print("="*80)

try:
    selector = VarianceThresholdSelector(threshold=0.01)
    X_selected = selector.fit_transform(X_numeric)
    
    print(f"‚úÖ VarianceThresholdSelector funciona")
    print(f"   ‚Ä¢ Shape antes: {X_numeric.shape}")
    print(f"   ‚Ä¢ Shape despu√©s: {X_selected.shape}")
    print(f"   ‚Ä¢ Features removidas: {X_numeric.shape[1] - X_selected.shape[1]}")
    print(f"   ‚Ä¢ Threshold: {selector.threshold}")
    
    assert X_selected.shape[1] <= X_numeric.shape[1], "Puede remover features"
    
except Exception as e:
    print(f"‚ùå Error: {e}")
    import traceback
    traceback.print_exc()
    sys.exit(1)

# ============================================================================
# TEST 8: FEATURE PIPELINE BUILDER
# ============================================================================
print("\n" + "="*80)
print("8Ô∏è‚É£  TEST DE FEATUREPIPELINEBUILDER")
print("="*80)

try:
    pipeline = (FeaturePipelineBuilder()
                .add_numeric_selector(exclude_cols=['id'])
                .add_power_transformer(method='yeo-johnson')
                .add_feature_scaler(method='standard')
                .build())
    
    X_processed = pipeline.fit_transform(X_train)
    
    print(f"‚úÖ FeaturePipelineBuilder funciona")
    print(f"   ‚Ä¢ Pipeline creado con 3 steps")
    print(f"   ‚Ä¢ Shape final: {X_processed.shape}")
    print(f"   ‚Ä¢ Steps: {[name for name, _ in pipeline.steps]}")
    
    assert len(pipeline.steps) == 3, "Deber√≠a tener 3 steps"
    assert X_processed.shape[0] == X_train.shape[0], "Filas deber√≠an mantenerse"
    
except Exception as e:
    print(f"‚ùå Error: {e}")
    import traceback
    traceback.print_exc()
    sys.exit(1)

# ============================================================================
# TEST 9: FACTORY - create_preprocessing_pipeline
# ============================================================================
print("\n" + "="*80)
print("9Ô∏è‚É£  TEST DE create_preprocessing_pipeline")
print("="*80)

try:
    pipeline = create_preprocessing_pipeline(
        exclude_cols=['id'],
        power_transform=True
    )
    
    X_processed = pipeline.fit_transform(X_train)
    
    print(f"‚úÖ create_preprocessing_pipeline funciona")
    print(f"   ‚Ä¢ Pipeline: {len(pipeline.steps)} steps")
    print(f"   ‚Ä¢ Shape: {X_processed.shape}")
    print(f"   ‚Ä¢ Steps: {[name for name, _ in pipeline.steps]}")
    
except Exception as e:
    print(f"‚ùå Error: {e}")
    import traceback
    traceback.print_exc()
    sys.exit(1)

# ============================================================================
# TEST 10: FACTORY - create_feature_selection_pipeline
# ============================================================================
print("\n" + "="*80)
print("üîü TEST DE create_feature_selection_pipeline")
print("="*80)

try:
    pipeline = create_feature_selection_pipeline(
        variance_threshold=0.01,
        correlation_threshold=0.95
    )
    
    X_selected = pipeline.fit_transform(X_numeric)
    
    print(f"‚úÖ create_feature_selection_pipeline funciona")
    print(f"   ‚Ä¢ Pipeline: {len(pipeline.steps)} steps")
    print(f"   ‚Ä¢ Shape antes: {X_numeric.shape}")
    print(f"   ‚Ä¢ Shape despu√©s: {X_selected.shape}")
    print(f"   ‚Ä¢ Steps: {[name for name, _ in pipeline.steps]}")
    
except Exception as e:
    print(f"‚ùå Error: {e}")
    import traceback
    traceback.print_exc()
    sys.exit(1)

# ============================================================================
# TEST 11: FACTORY - create_full_pipeline
# ============================================================================
print("\n" + "="*80)
print("1Ô∏è‚É£1Ô∏è‚É£  TEST DE create_full_pipeline")
print("="*80)

try:
    pipeline = create_full_pipeline(
        exclude_cols=['id'],
        remove_outliers=True,
        scale_method='robust'
    )
    
    X_full = pipeline.fit_transform(X_train)
    
    print(f"‚úÖ create_full_pipeline funciona")
    print(f"   ‚Ä¢ Pipeline completo: {len(pipeline.steps)} steps")
    print(f"   ‚Ä¢ Shape antes: {X_train.shape}")
    print(f"   ‚Ä¢ Shape despu√©s: {X_full.shape}")
    print(f"   ‚Ä¢ Steps: {[name for name, _ in pipeline.steps]}")
    print(f"   ‚Ä¢ Incluye: selector + outlier_remover + power + scaler")
    
    assert len(pipeline.steps) == 4, "Deber√≠a tener 4 steps"
    
except Exception as e:
    print(f"‚ùå Error: {e}")
    import traceback
    traceback.print_exc()
    sys.exit(1)

# ============================================================================
# TEST 12: VALIDACI√ìN DE ERRORES
# ============================================================================
print("\n" + "="*80)
print("1Ô∏è‚É£2Ô∏è‚É£  TEST DE VALIDACI√ìN DE ERRORES")
print("="*80)

try:
    # Test 1: Datos None
    try:
        selector = NumericFeatureSelector()
        selector.fit(None)
        print("‚ùå Deber√≠a rechazar datos None")
        sys.exit(1)
    except ValueError:
        print("‚úÖ Rechaza correctamente datos None")
    
    # Test 2: Transformer sin fit
    try:
        selector = NumericFeatureSelector()
        selector.transform(X_train)
        print("‚ùå Deber√≠a requerir fit primero")
        sys.exit(1)
    except RuntimeError:
        print("‚úÖ Requiere fit() antes de transform() correctamente")
    
    # Test 3: M√©todo inv√°lido en scaler
    try:
        scaler = FeatureScaler(method='invalid')
        print("‚ùå Deber√≠a rechazar m√©todo inv√°lido")
        sys.exit(1)
    except ValueError:
        print("‚úÖ Rechaza m√©todos inv√°lidos correctamente")
    
    # Test 4: Pipeline vac√≠o
    try:
        builder = FeaturePipelineBuilder()
        builder.build()
        print("‚ùå Deber√≠a rechazar pipeline vac√≠o")
        sys.exit(1)
    except ValueError:
        print("‚úÖ Rechaza pipeline vac√≠o correctamente")
    
    print("\n‚úÖ Todas las validaciones de errores funcionan")
    
except Exception as e:
    print(f"‚ùå Error inesperado: {e}")
    import traceback
    traceback.print_exc()
    sys.exit(1)

# ============================================================================
# TEST 13: COMPATIBILIDAD CON NUMPY ARRAYS
# ============================================================================
print("\n" + "="*80)
print("1Ô∏è‚É£3Ô∏è‚É£  TEST DE COMPATIBILIDAD CON NUMPY ARRAYS")
print("="*80)

try:
    X_array = X_numeric_clean.values
    
    # Test PowerTransformer con array
    transformer = PowerFeatureTransformer()
    X_transformed = transformer.fit_transform(X_array)
    
    print(f"‚úÖ Compatible con numpy arrays")
    print(f"   ‚Ä¢ Input type: {type(X_array)}")
    print(f"   ‚Ä¢ Output type: {type(X_transformed)}")
    print(f"   ‚Ä¢ Shape preservada: {X_array.shape == X_transformed.shape}")
    
    assert isinstance(X_transformed, np.ndarray), "Deber√≠a retornar array"
    
except Exception as e:
    print(f"‚ùå Error: {e}")
    import traceback
    traceback.print_exc()
    sys.exit(1)

# ============================================================================
# RESUMEN FINAL
# ============================================================================
print("\n" + "="*80)
print("‚úÖ TODOS LOS TESTS PASARON EXITOSAMENTE (13/13)")
print("="*80)

print("\nüìä RESUMEN DE LA REFACTORIZACI√ìN:")
print("   ‚îú‚îÄ FeatureTransformer: Clase base con validaci√≥n ‚úì")
print("   ‚îú‚îÄ NumericFeatureSelector: Selecci√≥n num√©rica ‚úì")
print("   ‚îú‚îÄ PowerFeatureTransformer: Normalizaci√≥n ‚úì")
print("   ‚îú‚îÄ OutlierRemover: Detecci√≥n IQR ‚úì")
print("   ‚îú‚îÄ FeatureScaler: 3 m√©todos de escalado ‚úì")
print("   ‚îú‚îÄ CorrelationFilter: Filtrado por correlaci√≥n ‚úì")
print("   ‚îú‚îÄ VarianceThresholdSelector: Filtrado por varianza ‚úì")
print("   ‚îú‚îÄ FeaturePipelineBuilder: Construcci√≥n fluida ‚úì")
print("   ‚îú‚îÄ Factory functions: 3 pipelines pre-configurados ‚úì")
print("   ‚îú‚îÄ Validaci√≥n robusta de errores ‚úì")
print("   ‚îú‚îÄ Compatible con DataFrames y arrays ‚úì")
print("   ‚îî‚îÄ Logging comprehensivo ‚úì")

print("\nüéØ features.py LISTO PARA PRODUCCI√ìN!")
print("   ‚Ä¢ De 88 l√≠neas ‚Üí ~930 l√≠neas")
print("   ‚Ä¢ 7 transformers especializados")
print("   ‚Ä¢ Builder pattern implementado")
print("   ‚Ä¢ 3 factory functions")
print("   ‚Ä¢ Documentaci√≥n completa en espa√±ol")
print("   ‚Ä¢ SOLID principles en todos los componentes")

print("\n" + "="*80)
